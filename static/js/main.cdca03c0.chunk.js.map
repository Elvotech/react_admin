{"version":3,"sources":["users.js","dashboard.js","authProvider.js","posts.js","App.js","reportWebVitals.js","index.js"],"names":["UserList","props","List","Datagrid","rowClick","TextField","source","EmailField","UrlField","CardHeader","title","CardContent","login","username","localStorage","setItem","Promise","resolve","logout","removeItem","checkError","status","reject","checkAuth","getItem","getPermissions","PostList","TextInput","ReferenceInput","SelectInput","isSmall","useMediaQuery","theme","breakpoints","down","SimpleList","primaryText","record","secondaryText","views","tertiaryText","Date","published_at","toLocaleDateString","ReferenceField","label","reference","EditButton","PostTitle","postEdit","Edit","SimpleForm","disabled","optionText","multiline","postCreate","Create","dataProvider","jsonServerProvider","App","Admin","dashboard","Dashboard","authProvider","Resource","name","list","edit","create","icon","PostIcon","UserIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdca03c0.chunk.js","sourcesContent":["import * as React from 'react';\nimport {List, Datagrid, TextField, EmailField, UrlField} from 'react-admin';\n\nexport const UserList = props => (\n    <List{...props}>\n    <Datagrid rowClick = \"edit\">\n        <TextField source = \"id\"/>\n        <TextField source = \"name\"/>\n        <TextField source = \"username\"/>\n        <EmailField source = \"email\"/>\n        <TextField source = \"phone\"/>\n        <UrlField source = \"website\"/>\n        <TextField source = \"company.name\"/>\n    </Datagrid> \n    </List>\n);","import * as React from 'react';\n\nimport { Card, CardContent, CardHeader } from '@material-ui/core';\n\nexport default () => (\n    <card>\n        <CardHeader title = \"Welcome to Admin Dashboard\"/>\n        <CardContent> Just do what your hearth is telling you</CardContent>\n    </card>\n);\n","export default {\n    //called when the user attempts to login\n    login: ({username}) => {\n    localStorage.setItem('username', username);\n    //Accepts all username/password combination\n    return Promise.resolve();\n    },\n\n\n    //Called when user clocked on logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    },\n\n\n    //Called when an API returns an error\n    checkError: ({status}) => {\n        if (status ===401 || status === 403){\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n\n\n    //called when the user naviagtes to the new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('username')\n        ? Promise.resolve()\n        : Promise.reject();\n    },\n\n\n    //called when the user navigates to the new location to check for permissions/ roles\n    getPermissions: () => Promise.resolve(),\n};","import * as React from 'react';\nimport { useMediaQuery } from '@material-ui/core';\nimport {List, TextField, Datagrid, ReferenceField, EditButton, Edit, Create, SimpleForm, SimpleList, ReferenceInput, SelectInput, TextInput} from 'react-admin';\n\nconst postFilters = [\n    <TextInput source = \"q\" label = \"Search\" alwaysOn />,\n    <ReferenceInput source = \"userId\" label = \"User\" reference = \"users\" allowEmpty>\n        <SelectInput optionText = \"name\"/>\n    </ReferenceInput>,\n];\n\nexport const PostList = (props) => {\n    const isSmall = useMediaQuery(theme => theme.breakpoints.down('sm'));\n    return (\n        <List {...props}>\n        {isSmall ? (\n            <SimpleList\n                primaryText={record => record.title}\n                secondaryText={record => `${record.views} views`}\n                tertiaryText={record => new Date(record.published_at).toLocaleDateString()}\n            />\n        ) : (\n            <Datagrid>\n                <TextField source=\"id\" />\n                <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n                    <TextField source=\"name\" />\n                </ReferenceField>\n                <TextField source=\"title\" />\n                <TextField source=\"body\" />\n                <EditButton />\n            </Datagrid>\n        )}\n    </List>\n);\n}\n\n\nconst PostTitle = ({ record }) => {\n      return <span> Post {record ? `\"${record.title}\"` : ' ' } </span>;\n};\n\nexport const postEdit = props => (\n    <Edit title = { < PostTitle /> } { ...props }>\n        <SimpleForm>\n        <TextInput disabled source = \"id\"/>\n        <ReferenceInput source = \"userId\" reference = \"users\">\n            <SelectInput optionText = \"name\"/>\n        </ReferenceInput>\n        <TextInput source = 'title'/>\n        <TextInput multiline source = \"body\"/>\n    </SimpleForm>  \n    </Edit>\n);\n\nexport const postCreate = (props) => (\n    <Create{...props}>\n    <SimpleForm>\n        <ReferenceInput source = \"userId\" reference = \"users\">\n        <SelectInput optionText = \"name\"/>\n        </ReferenceInput>\n        <TextInput source = \"title\"/>\n        <TextInput multiline source = \"body\"/>\n    </SimpleForm>\n    </Create>\n);\n","import * as React from 'react';\nimport {Admin, Resource} from 'react-admin';\nimport {UserList} from './users';\nimport Dashboard from './dashboard';\nimport authProvider from './authProvider';\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/Group';\nimport {PostList, postEdit, postCreate} from './posts';\nimport jsonServerProvider from 'ra-data-json-server';\n\nconst dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n\nconst App = () => (\n  <Admin dashboard = {Dashboard} authProvider = {authProvider} dataProvider = {dataProvider}>\n    <Resource name = \"posts\" list = {PostList} edit = {postEdit} create = {postCreate} icon = {PostIcon} />\n    <Resource name = \"users\" list = {UserList} icon = {UserIcon} />\n  </Admin>\n);\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}